import cv2
import keras
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image, ImageDraw
import tensorflow as tf
import tkinter as tk


class Application(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.pack()
        self.load_model()
        self.create_widgets()
        self.setup_image()

    def load_model(self):
        self.model = tf.keras.models.load_model('number_identifier.h5')
        
    def create_widgets(self):
        self.canvas = tk.Canvas(width=500, height=500, bg="#fff")
        self.canvas.pack()
        self.canvas.bind("<B1-Motion>", self.paint) 

        self.predict_button = tk.Button(self)
        self.predict_button["text"] = "Predict"
        self.predict_button["command"] = self.predict
        self.predict_button.pack(side="top")

        self.clear_button = tk.Button(self)
        self.clear_button["text"] = "Clear"
        self.clear_button["command"] = self.clear
        self.clear_button.pack(side="bottom")

    def paint(self, event):
        x1, y1 = (event.x - 10), (event.y - 10)
        x2, y2 = (event.x + 10), (event.y + 10)
        self.canvas.create_oval(x1, y1, x2, y2, fill="black", width=0)
        self.draw.ellipse([(x1, y1), (x2, y2)], fill=(0), width=40)

    def setup_image(self):
        self.image = Image.new("L", (500, 500), color = (255))
        self.draw = ImageDraw.Draw(self.image)

    def predict(self):
        img = np.array(self.image)
        img = cv2.resize(img, (28, 28))
        img = img.reshape(1, 28, 28, 1).astype('float32') / 255.0       
        prediction = self.model.predict(img)
        print(np.argmax(prediction[0]))        

    def clear(self):
        self.canvas.delete('all')
        self.draw.rectangle((0, 0, 500, 500), fill=(255))

root = tk.Tk()
app = Application(master=root)
app.mainloop()